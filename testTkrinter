import tkinter as tk
from tkinter import messagebox
import sqlite3

# Создание/подключение к базе данных
conn = sqlite3.connect("user_auth.db")
cursor = conn.cursor()

# Создание таблицы пользователей
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    attempts INTEGER DEFAULT 0,
    blocked INTEGER DEFAULT 0
)
""")
conn.commit()

# Функция регистрации нового пользователя
def register():
    def save_user():
        username = username_entry.get()
        password = password_entry.get()
        if username and password:
            try:
                cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
                conn.commit()
                messagebox.showinfo("Успех", "Пользователь успешно зарегистрирован!")
                reg_window.destroy()
            except sqlite3.IntegrityError:
                messagebox.showerror("Ошибка", "Пользователь с таким именем уже существует!")
        else:
            messagebox.showerror("Ошибка", "Заполните все поля!")
    
    reg_window = tk.Toplevel()
    reg_window.title("Регистрация")
    tk.Label(reg_window, text="Имя пользователя").pack(pady=5)
    username_entry = tk.Entry(reg_window)
    username_entry.pack(pady=5)
    tk.Label(reg_window, text="Пароль").pack(pady=5)
    password_entry = tk.Entry(reg_window, show="*")
    password_entry.pack(pady=5)
    tk.Button(reg_window, text="Сохранить", command=save_user).pack(pady=10)

# Функция для успешного входа
def user_dashboard(username):
    dash_window = tk.Toplevel()
    dash_window.title("Личное окно")
    tk.Label(dash_window, text=f"Добро пожаловать, {username}!", font=("Arial", 16)).pack(pady=20)
    tk.Label(dash_window, text="Ваш логотип будет здесь.").pack(pady=10)

# Функция входа в систему
def login():
    username = username_entry.get()
    password = password_entry.get()
    if username and password:
        cursor.execute("SELECT password, attempts, blocked FROM users WHERE username=?", (username,))
        user = cursor.fetchone()
        if user:
            stored_password, attempts, blocked = user
            if blocked:
                messagebox.showerror("Ошибка", "Этот пользователь заблокирован!")
                return
            
            if password == stored_password:
                cursor.execute("UPDATE users SET attempts=0 WHERE username=?", (username,))
                conn.commit()
                messagebox.showinfo("Успех", "Вход выполнен успешно!")
                user_dashboard(username)
            else:
                attempts += 1
                if attempts >= 3:
                    cursor.execute("UPDATE users SET blocked=1 WHERE username=?", (username,))
                    conn.commit()
                    messagebox.showerror("Ошибка", "Ваш аккаунт заблокирован из-за 3 неудачных попыток!")
                else:
                    cursor.execute("UPDATE users SET attempts=? WHERE username=?", (attempts, username))
                    conn.commit()
                    messagebox.showerror("Ошибка", f"Неверный пароль! Попыток осталось: {3 - attempts}")
        else:
            messagebox.showerror("Ошибка", "Пользователь не найден!")
    else:
        messagebox.showerror("Ошибка", "Заполните все поля!")

# Основное окно
root = tk.Tk()
root.title("Система входа")

tk.Label(root, text="Имя пользователя").pack(pady=5)
username_entry = tk.Entry(root)
username_entry.pack(pady=5)
tk.Label(root, text="Пароль").pack(pady=5)
password_entry = tk.Entry(root, show="*")
password_entry.pack(pady=5)
tk.Button(root, text="Вход", command=login).pack(pady=10)
tk.Button(root, text="Регистрация", command=register).pack(pady=5)

root.mainloop()

# Закрытие соединения с базой данных
conn.close()
